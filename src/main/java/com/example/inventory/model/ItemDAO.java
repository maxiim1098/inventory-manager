package com.example.inventory.model;

import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ).
 */
public class ItemDAO {
    private static final String DB_URL = "jdbc:sqlite:inventory.db";
    private static final DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    static {
        initializeDatabase();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∫–ª–∞—Å—Å—É.
     * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
     */
    private static void initializeDatabase() {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement()) {

            String sql = "CREATE TABLE IF NOT EXISTS items (" +
                    "id TEXT PRIMARY KEY," +
                    "name TEXT NOT NULL CHECK(LENGTH(name) BETWEEN 3 AND 50)," +
                    "description TEXT CHECK(LENGTH(description) <= 255)," +
                    "createdAt TEXT NOT NULL," +
                    "updatedAt TEXT NOT NULL)";

            stmt.execute(sql);
            System.out.println("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
     */
    private Connection connect() throws SQLException {
        return DriverManager.getConnection(DB_URL);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
     */
    public void create(Item item) {
        if (!item.validate()) {
            throw new IllegalArgumentException("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞");
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (item.getId() == null) {
            item.setId(UUID.randomUUID());
        }

        String sql = "INSERT INTO items(id, name, description, createdAt, updatedAt) VALUES(?,?,?,?,?)";

        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, item.getId().toString());
            pstmt.setString(2, item.getName());
            pstmt.setString(3, item.getDescription());
            pstmt.setString(4, item.getCreatedAt().format(formatter));
            pstmt.setString(5, item.getUpdatedAt().format(formatter));

            pstmt.executeUpdate();
            System.out.println("‚ûï –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω: " + item.getName());
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: " + e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
     */
    public List<Item> readAll() {
        List<Item> items = new ArrayList<>();
        String sql = "SELECT * FROM items";

        try (Connection conn = connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                Item item = new Item();
                item.setId(UUID.fromString(rs.getString("id")));
                item.setName(rs.getString("name"));
                item.setDescription(rs.getString("description"));
                item.setCreatedAt(LocalDateTime.parse(rs.getString("createdAt"), formatter));
                item.setUpdatedAt(LocalDateTime.parse(rs.getString("updatedAt"), formatter));
                items.add(item);
            }
            System.out.println("üì• –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: " + items.size());
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: " + e.getMessage());
        }
        return items;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
     */
    public void update(Item item) {
        if (!item.validate()) {
            throw new IllegalArgumentException("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞");
        }

        String sql = "UPDATE items SET name = ?, description = ?, updatedAt = ? WHERE id = ?";

        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, item.getName());
            pstmt.setString(2, item.getDescription());
            pstmt.setString(3, item.getUpdatedAt().format(formatter));
            pstmt.setString(4, item.getId().toString());

            pstmt.executeUpdate();
            System.out.println("üîÑ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: " + item.getName());
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: " + e.getMessage());
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
     */
    public void delete(UUID id) {
        String sql = "DELETE FROM items WHERE id = ?";

        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, id.toString());
            pstmt.executeUpdate();
            System.out.println("üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω: " + id);
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: " + e.getMessage());
        }
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
     */
    public Item getById(UUID id) {
        String sql = "SELECT * FROM items WHERE id = ?";
        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, id.toString());
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    Item item = new Item();
                    item.setId(UUID.fromString(rs.getString("id")));
                    item.setName(rs.getString("name"));
                    item.setDescription(rs.getString("description"));
                    item.setCreatedAt(LocalDateTime.parse(rs.getString("createdAt"), formatter));
                    item.setUpdatedAt(LocalDateTime.parse(rs.getString("updatedAt"), formatter));
                    return item;
                }
            }
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID: " + e.getMessage());
        }
        return null;
    }
}