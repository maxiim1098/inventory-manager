package com.example.inventory.controller;

import com.example.inventory.model.Item;
import com.example.inventory.model.ItemDAO;
import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Comparator;

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º, —Ç–∞–±–ª–∏—Ü–µ–π —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏.
 */
public class MainController {
    private final ItemDAO itemDAO = new ItemDAO(); // DAO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    private final ObservableList<Item> items = FXCollections.observableArrayList(); // –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤

    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    @FXML private TableView<Item> itemsTable;
    @FXML private TableColumn<Item, String> idColumn;
    @FXML private TableColumn<Item, String> nameColumn;
    @FXML private TableColumn<Item, String> descriptionColumn;
    @FXML private TableColumn<Item, LocalDateTime> createdAtColumn;
    @FXML private TextField searchField;
    @FXML private ComboBox<String> sortComboBox;

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞.
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
     */
    @FXML
    public void initialize() {
        configureTableColumns(); // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        loadData();              // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        setupSearchFilter();     // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∏—Å–∫–∞
        setupSorting();          // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤.
     */
    private void configureTableColumns() {
        idColumn.setCellValueFactory(cellData ->
                new SimpleStringProperty(cellData.getValue().getId().toString()));

        nameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        descriptionColumn.setCellValueFactory(new PropertyValueFactory<>("description"));
        createdAtColumn.setCellValueFactory(new PropertyValueFactory<>("createdAt"));

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –∫–æ–ª–æ–Ω–∫–µ
        createdAtColumn.setCellFactory(column -> new TableCell<>() {
            private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

            @Override
            protected void updateItem(LocalDateTime item, boolean empty) {
                super.updateItem(item, empty);
                setText((empty || item == null) ? "" : formatter.format(item));
            }
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É.
     */
    private void loadData() {
        items.setAll(itemDAO.readAll());
        itemsTable.setItems(items);
        System.out.println("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –¢–æ–≤–∞—Ä–æ–≤: " + items.size());
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
     */
    private void setupSearchFilter() {
        searchField.textProperty().addListener((obs, oldVal, newVal) ->
                filterItems(newVal.toLowerCase())
        );
    }

    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
     */
    private void filterItems(String filter) {
        if (filter.isEmpty()) {
            itemsTable.setItems(items);
            return;
        }

        ObservableList<Item> filteredItems = FXCollections.observableArrayList();
        for (Item item : items) {
            boolean nameMatches = item.getName().toLowerCase().contains(filter);
            boolean descMatches = item.getDescription() != null &&
                    item.getDescription().toLowerCase().contains(filter);

            if (nameMatches || descMatches) {
                filteredItems.add(item);
            }
        }
        itemsTable.setItems(filteredItems);
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Ç–æ–≤–∞—Ä–æ–≤.
     */
    private void setupSorting() {
        sortComboBox.getItems().addAll(
                "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ê-–Ø)",
                "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ø-–ê)",
                "–ü–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ)"
        );
        sortComboBox.getSelectionModel().selectFirst();
        handleSort(); // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ FXML).
     */
    @FXML
    private void handleSort() {
        String selected = sortComboBox.getSelectionModel().getSelectedItem();
        if (selected == null) return;

        Comparator<Item> comparator = switch (selected) {
            case "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ê-–Ø)" -> Comparator.comparing(Item::getName);
            case "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ø-–ê)" -> Comparator.comparing(Item::getName).reversed();
            case "–ü–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ)" -> Comparator.comparing(Item::getCreatedAt).reversed();
            default -> null;
        };

        if (comparator != null) {
            FXCollections.sort(items, comparator);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    @FXML
    private void handleAdd() {
        showItemForm(new Item());
    }

    @FXML
    private void handleEdit() {
        Item selected = itemsTable.getSelectionModel().getSelectedItem();
        if (selected != null) {
            showItemForm(selected);
        } else {
            showAlert("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
        }
    }

    @FXML
    private void handleDelete() {
        Item selected = itemsTable.getSelectionModel().getSelectedItem();
        if (selected != null) {
            confirmAndDelete(selected);
        } else {
            showAlert("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
        }
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä.
     */
    private void confirmAndDelete(Item item) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è");
        alert.setHeaderText("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞");
        alert.setContentText("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: " + item.getName() + "?");

        alert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.OK) {
                itemDAO.delete(item.getId());
                items.remove(item);
                loadData();
                showAlert("–£—Å–ø–µ—Ö", "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω: " + item.getName());
            }
        });
    }

    @FXML
    private void handleExit() {
        Platform.exit();
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
     */
    private void showItemForm(Item item) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/view/item-form.fxml"));
            Parent root = loader.load();

            ItemFormController controller = loader.getController();
            controller.setItem(item);

            Stage stage = new Stage();
            stage.initModality(Modality.APPLICATION_MODAL);
            stage.setTitle(item.getName() == null ? "–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä" : "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: " + item.getName());
            stage.setScene(new Scene(root));
            stage.showAndWait();

            if (controller.isSaved()) {
                saveItem(item);
            }
        } catch (IOException e) {
            e.printStackTrace();
            showAlert("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É: " + e.getMessage());
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
     */
    private void saveItem(Item originalItem) {
        Item savedItem = new Item();
        savedItem.setName(originalItem.getName());
        savedItem.setDescription(originalItem.getDescription());

        itemDAO.create(savedItem);
        loadData();

        showAlert("–£—Å–ø–µ—Ö", "–¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: " + savedItem.getName());
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ.
     */
    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}